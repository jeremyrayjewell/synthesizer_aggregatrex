{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\aggregatrex-1\\\\src\\\\hooks\\\\useSynth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useContext, useEffect, useRef, useState, createContext } from 'react';\nimport SynthEngine from '../audio/SynthEngine';\n\n// Create React Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SynthContext = /*#__PURE__*/createContext(null);\n\n// Synth Provider Component\nexport const SynthProvider = ({\n  children\n}) => {\n  _s();\n  const synthRef = useRef(null);\n  const [isReady, setIsReady] = useState(false);\n  useEffect(() => {\n    synthRef.current = new SynthEngine();\n    setIsReady(true);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SynthContext.Provider, {\n    value: synthRef.current,\n    children: isReady ? children : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom Hook to use Synth\n_s(SynthProvider, \"rB7fgTCJL5JHOLbxFkFI1SKxT2U=\");\n_c = SynthProvider;\nexport const useSynth = () => {\n  _s2();\n  const synth = useContext(SynthContext);\n  if (!synth) {\n    throw new Error('useSynth must be used within a SynthProvider');\n  }\n  return synth;\n};\n_s2(useSynth, \"qpur6ItITpDYwQTdxm3eg2K4Nyk=\");\nvar _c;\n$RefreshReg$(_c, \"SynthProvider\");","map":{"version":3,"names":["useContext","useEffect","useRef","useState","createContext","SynthEngine","jsxDEV","_jsxDEV","SynthContext","SynthProvider","children","_s","synthRef","isReady","setIsReady","current","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSynth","_s2","synth","Error","$RefreshReg$"],"sources":["D:/git/aggregatrex-1/src/hooks/useSynth.js"],"sourcesContent":["import { useContext, useEffect, useRef, useState, createContext } from 'react';\r\nimport SynthEngine from '../audio/SynthEngine';\r\n\r\n// Create React Context\r\nconst SynthContext = createContext(null);\r\n\r\n// Synth Provider Component\r\nexport const SynthProvider = ({ children }) => {\r\n  const synthRef = useRef(null);\r\n  const [isReady, setIsReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    synthRef.current = new SynthEngine();\r\n    setIsReady(true);\r\n  }, []);\r\n\r\n  return (\r\n    <SynthContext.Provider value={synthRef.current}>\r\n      {isReady ? children : null}\r\n    </SynthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom Hook to use Synth\r\nexport const useSynth = () => {\r\n  const synth = useContext(SynthContext);\r\n  if (!synth) {\r\n    throw new Error('useSynth must be used within a SynthProvider');\r\n  }\r\n  return synth;\r\n};\r\n"],"mappings":";;;AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,aAAa,QAAQ,OAAO;AAC9E,OAAOC,WAAW,MAAM,sBAAsB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGJ,aAAa,CAAC,IAAI,CAAC;;AAExC;AACA,OAAO,MAAMK,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7CF,SAAS,CAAC,MAAM;IACdW,QAAQ,CAACG,OAAO,GAAG,IAAIV,WAAW,CAAC,CAAC;IACpCS,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA,CAACC,YAAY,CAACQ,QAAQ;IAACC,KAAK,EAAEL,QAAQ,CAACG,OAAQ;IAAAL,QAAA,EAC5CG,OAAO,GAAGH,QAAQ,GAAG;EAAI;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAE5B,CAAC;;AAED;AAAAV,EAAA,CAhBaF,aAAa;AAAAa,EAAA,GAAbb,aAAa;AAiB1B,OAAO,MAAMc,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,KAAK,GAAGzB,UAAU,CAACQ,YAAY,CAAC;EACtC,IAAI,CAACiB,KAAK,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,KAAK;AACd,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}