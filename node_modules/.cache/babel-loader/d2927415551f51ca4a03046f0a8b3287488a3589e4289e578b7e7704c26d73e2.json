{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\aggregatrex-1\\\\src\\\\components\\\\Keyboard3D.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WHITE_KEYS = [0, 2, 4, 5, 7, 9, 11];\nconst BLACK_KEYS = [1, 3, 6, 8, 10];\nconst isBlack = note => BLACK_KEYS.includes(note % 12);\nconst Key = ({\n  note,\n  x,\n  isBlackKey,\n  onNoteOn,\n  onNoteOff\n}) => {\n  _s();\n  const [pressed, setPressed] = useState(false);\n  const width = isBlackKey ? 0.6 : 1;\n  const height = isBlackKey ? 0.5 : 0.2;\n  const depth = isBlackKey ? 3 : 4.5;\n  const color = isBlackKey ? 'black' : 'white';\n  const baseY = height / 2;\n  const pressDepth = 0.05;\n  const pressTilt = isBlackKey ? 0.05 : 0.03;\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [x, pressed ? baseY - pressDepth : baseY, isBlackKey ? -0.75 : 0],\n    rotation: [pressed ? -pressTilt : 0, 0, 0],\n    onPointerDown: () => {\n      setPressed(true);\n      onNoteOn(note, 127);\n    },\n    onPointerUp: () => {\n      setPressed(false);\n      onNoteOff(note);\n    },\n    onPointerOut: () => {\n      setPressed(false);\n      onNoteOff(note);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [width, height, depth]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(Key, \"DPHG9W12kHGq8FFQtt6pAxE5+Z0=\");\n_c = Key;\nconst Keyboard3D = ({\n  startNote = 48,\n  endNote = 72,\n  onNoteOn,\n  onNoteOff\n}) => {\n  const notes = Array.from({\n    length: endNote - startNote + 1\n  }, (_, i) => startNote + i);\n  const whiteNotes = notes.filter(n => !isBlack(n));\n  const blackNotes = notes.filter(n => isBlack(n));\n  const keySpacing = 1.05;\n  const offset = whiteNotes.length * keySpacing / 2;\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [-offset, 0, 0],\n    children: [whiteNotes.map((note, i) => /*#__PURE__*/_jsxDEV(Key, {\n      note: note,\n      x: i * keySpacing,\n      isBlackKey: false,\n      onNoteOn: onNoteOn,\n      onNoteOff: onNoteOff\n    }, note, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)), blackNotes.map(note => {\n      const index = whiteNotes.findIndex(n => n > note) - 1;\n      const x = index * keySpacing + 0.65;\n      return /*#__PURE__*/_jsxDEV(Key, {\n        note: note,\n        x: x,\n        isBlackKey: true,\n        onNoteOn: onNoteOn,\n        onNoteOff: onNoteOff\n      }, note, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Keyboard3D;\nexport default Keyboard3D;\nvar _c, _c2;\n$RefreshReg$(_c, \"Key\");\n$RefreshReg$(_c2, \"Keyboard3D\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","WHITE_KEYS","BLACK_KEYS","isBlack","note","includes","Key","x","isBlackKey","onNoteOn","onNoteOff","_s","pressed","setPressed","width","height","depth","color","baseY","pressDepth","pressTilt","position","rotation","onPointerDown","onPointerUp","onPointerOut","children","args","fileName","_jsxFileName","lineNumber","columnNumber","_c","Keyboard3D","startNote","endNote","notes","Array","from","length","_","i","whiteNotes","filter","n","blackNotes","keySpacing","offset","map","index","findIndex","_c2","$RefreshReg$"],"sources":["D:/git/aggregatrex-1/src/components/Keyboard3D.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst WHITE_KEYS = [0, 2, 4, 5, 7, 9, 11];\r\nconst BLACK_KEYS = [1, 3, 6, 8, 10];\r\n\r\nconst isBlack = (note) => BLACK_KEYS.includes(note % 12);\r\n\r\nconst Key = ({ note, x, isBlackKey, onNoteOn, onNoteOff }) => {\r\n  const [pressed, setPressed] = useState(false);\r\n\r\n  const width = isBlackKey ? 0.6 : 1;\r\n  const height = isBlackKey ? 0.5 : 0.2;\r\n  const depth = isBlackKey ? 3 : 4.5;\r\n  const color = isBlackKey ? 'black' : 'white';\r\n\r\n  const baseY = height / 2;\r\n  const pressDepth = 0.05;\r\n  const pressTilt = isBlackKey ? 0.05 : 0.03;\r\n\r\n  return (\r\n    <mesh\r\n      position={[x, pressed ? baseY - pressDepth : baseY, isBlackKey ? -0.75 : 0]}\r\n      rotation={[pressed ? -pressTilt : 0, 0, 0]}\r\n      onPointerDown={() => {\r\n        setPressed(true);\r\n        onNoteOn(note, 127);\r\n      }}\r\n      onPointerUp={() => {\r\n        setPressed(false);\r\n        onNoteOff(note);\r\n      }}\r\n      onPointerOut={() => {\r\n        setPressed(false);\r\n        onNoteOff(note);\r\n      }}\r\n    >\r\n      <boxGeometry args={[width, height, depth]} />\r\n      <meshStandardMaterial color={color} />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nconst Keyboard3D = ({ startNote = 48, endNote = 72, onNoteOn, onNoteOff }) => {\r\n  const notes = Array.from({ length: endNote - startNote + 1 }, (_, i) => startNote + i);\r\n  const whiteNotes = notes.filter(n => !isBlack(n));\r\n  const blackNotes = notes.filter(n => isBlack(n));\r\n\r\n  const keySpacing = 1.05;\r\n  const offset = (whiteNotes.length * keySpacing) / 2;\r\n\r\n  return (\r\n    <group position={[-offset, 0, 0]}>\r\n      {whiteNotes.map((note, i) => (\r\n        <Key\r\n          key={note}\r\n          note={note}\r\n          x={i * keySpacing}\r\n          isBlackKey={false}\r\n          onNoteOn={onNoteOn}\r\n          onNoteOff={onNoteOff}\r\n        />\r\n      ))}\r\n      {blackNotes.map((note) => {\r\n        const index = whiteNotes.findIndex(n => n > note) - 1;\r\n        const x = index * keySpacing + 0.65;\r\n        return (\r\n          <Key\r\n            key={note}\r\n            note={note}\r\n            x={x}\r\n            isBlackKey={true}\r\n            onNoteOn={onNoteOn}\r\n            onNoteOff={onNoteOff}\r\n          />\r\n        );\r\n      })}\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default Keyboard3D;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}