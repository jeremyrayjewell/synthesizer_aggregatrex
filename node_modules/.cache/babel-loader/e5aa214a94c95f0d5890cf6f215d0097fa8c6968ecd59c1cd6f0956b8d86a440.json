{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nexport function useMIDI(onNoteOn, onNoteOff) {\n  _s();\n  useEffect(() => {\n    let midiAccess = null;\n    const handleMIDIMessage = message => {\n      const [status, note, velocity] = message.data;\n      const command = status & 0xf0;\n      if (command === 0x90 && velocity > 0) {\n        onNoteOn(note, velocity);\n      } else if (command === 0x80 || command === 0x90 && velocity === 0) {\n        onNoteOff(note);\n      }\n    };\n    const initMIDI = async () => {\n      try {\n        midiAccess = await navigator.requestMIDIAccess();\n        for (let input of midiAccess.inputs.values()) {\n          input.onmidimessage = handleMIDIMessage;\n        }\n      } catch (err) {\n        console.error('MIDI access failed:', err);\n      }\n    };\n    initMIDI();\n    return () => {\n      if (midiAccess) {\n        for (let input of midiAccess.inputs.values()) {\n          input.onmidimessage = null;\n        }\n      }\n    };\n  }, [onNoteOn, onNoteOff]);\n}\n_s(useMIDI, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","useMIDI","onNoteOn","onNoteOff","_s","midiAccess","handleMIDIMessage","message","status","note","velocity","data","command","initMIDI","navigator","requestMIDIAccess","input","inputs","values","onmidimessage","err","console","error"],"sources":["D:/git/aggregatrex-1/src/hooks/useMIDI.js"],"sourcesContent":["import { useEffect } from 'react';\r\n\r\nexport function useMIDI(onNoteOn, onNoteOff) {\r\n  useEffect(() => {\r\n    let midiAccess = null;\r\n\r\n    const handleMIDIMessage = (message) => {\r\n      const [status, note, velocity] = message.data;\r\n\r\n      const command = status & 0xf0;\r\n      if (command === 0x90 && velocity > 0) {\r\n        onNoteOn(note, velocity);\r\n      } else if (command === 0x80 || (command === 0x90 && velocity === 0)) {\r\n        onNoteOff(note);\r\n      }\r\n    };\r\n\r\n    const initMIDI = async () => {\r\n      try {\r\n        midiAccess = await navigator.requestMIDIAccess();\r\n        for (let input of midiAccess.inputs.values()) {\r\n          input.onmidimessage = handleMIDIMessage;\r\n        }\r\n      } catch (err) {\r\n        console.error('MIDI access failed:', err);\r\n      }\r\n    };\r\n\r\n    initMIDI();\r\n\r\n    return () => {\r\n      if (midiAccess) {\r\n        for (let input of midiAccess.inputs.values()) {\r\n          input.onmidimessage = null;\r\n        }\r\n      }\r\n    };\r\n  }, [onNoteOn, onNoteOff]);\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,OAAO,SAASC,OAAOA,CAACC,QAAQ,EAAEC,SAAS,EAAE;EAAAC,EAAA;EAC3CJ,SAAS,CAAC,MAAM;IACd,IAAIK,UAAU,GAAG,IAAI;IAErB,MAAMC,iBAAiB,GAAIC,OAAO,IAAK;MACrC,MAAM,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,CAAC,GAAGH,OAAO,CAACI,IAAI;MAE7C,MAAMC,OAAO,GAAGJ,MAAM,GAAG,IAAI;MAC7B,IAAII,OAAO,KAAK,IAAI,IAAIF,QAAQ,GAAG,CAAC,EAAE;QACpCR,QAAQ,CAACO,IAAI,EAAEC,QAAQ,CAAC;MAC1B,CAAC,MAAM,IAAIE,OAAO,KAAK,IAAI,IAAKA,OAAO,KAAK,IAAI,IAAIF,QAAQ,KAAK,CAAE,EAAE;QACnEP,SAAS,CAACM,IAAI,CAAC;MACjB;IACF,CAAC;IAED,MAAMI,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACFR,UAAU,GAAG,MAAMS,SAAS,CAACC,iBAAiB,CAAC,CAAC;QAChD,KAAK,IAAIC,KAAK,IAAIX,UAAU,CAACY,MAAM,CAACC,MAAM,CAAC,CAAC,EAAE;UAC5CF,KAAK,CAACG,aAAa,GAAGb,iBAAiB;QACzC;MACF,CAAC,CAAC,OAAOc,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MAC3C;IACF,CAAC;IAEDP,QAAQ,CAAC,CAAC;IAEV,OAAO,MAAM;MACX,IAAIR,UAAU,EAAE;QACd,KAAK,IAAIW,KAAK,IAAIX,UAAU,CAACY,MAAM,CAACC,MAAM,CAAC,CAAC,EAAE;UAC5CF,KAAK,CAACG,aAAa,GAAG,IAAI;QAC5B;MACF;IACF,CAAC;EACH,CAAC,EAAE,CAACjB,QAAQ,EAAEC,SAAS,CAAC,CAAC;AAC3B;AAACC,EAAA,CApCeH,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}